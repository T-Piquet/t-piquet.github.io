<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cours on 420-SN1-A24</title>
    <link>http://example.org/cours/index.html</link>
    <description>Recent content in Cours on 420-SN1-A24</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language><atom:link href="http://example.org/cours/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introduction à la programmation</title>
      <link>http://example.org/cours/introduction-%C3%A0-la-programmation/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://example.org/cours/introduction-%C3%A0-la-programmation/index.html</guid>
      <description>Cours Qu&amp;rsquo;est-ce qu&amp;rsquo;un programme ? Un programme, ou une application, ou encore un logiciel, est un outil permettant la réalisation de tâches.
Traitement de texte Envois de messages Prévision météorologique Gestion de stock Montage vidéo Pour réaliser ces tâches, un programme va implémenter un ou plusieurs algorithmes dans un langage de programmation.
Qu&amp;rsquo;est-ce qu&amp;rsquo;un algorithme ? Un algorithme est une suite d&amp;rsquo;actions qui suivent un ordre précis. Cette suite d&amp;rsquo;actions représente les traitements sur les données.</description>
    </item>
    <item>
      <title>Analyse de problèmes</title>
      <link>http://example.org/cours/analyse-de-probl%C3%A8mes/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://example.org/cours/analyse-de-probl%C3%A8mes/index.html</guid>
      <description>Qu&amp;rsquo;est-ce que l’analyse du problème ? L&amp;rsquo;analyse du problème
L&amp;rsquo;analyse du problème est une étape cruciale dans le processus de résolution de problèmes en informatique. Elle implique la détermination des données d&amp;rsquo;entrée, des données de sortie et la nature des traitements. Les données d&amp;rsquo;entrée
Les données d&amp;rsquo;entrée sont les informations dont nous disposons au début. En bref, la question qui se pose est : &amp;ldquo;De quoi avons nous besoin pour obtenir le résultat recherché?</description>
    </item>
    <item>
      <title>Ordinogramme</title>
      <link>http://example.org/cours/ordinogramme/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://example.org/cours/ordinogramme/index.html</guid>
      <description>Cours Avant d&amp;rsquo;implémenter l&amp;rsquo;algorithme dans un langage en particulier, il existe plusieurs méthodes / outils pour nous aider à valider formellement le bon fonctionnement de notre algorithme:
le pseudo-code1 l&amp;rsquo;ordinogramme / organigramme Ordinogramme Un ordinogramme, aussi appelé organigramme de programmation est une représentation graphique de l&amp;rsquo;enchaînement des opérations, des décisions ou des fonctions à réaliser par un programme. Le programmeur devra traduire l&amp;rsquo;ordinogramme à l&amp;rsquo;aide d&amp;rsquo;un langage de programmation. L&amp;rsquo;organigramme de programmation utilise des symboles normalisés représentés ci- dessous : exemple d&amp;rsquo;ordinogramme Voici un exemple d&amp;rsquo;ordinogramme pour deviner un nombre: Lab Exercice 1 Écrire un ordinogramme qui calcule et affiche l&amp;rsquo;aire d&amp;rsquo;un rectangle à partir de la longueur et de la largeur saisies par l&amp;rsquo;utilisateur.</description>
    </item>
    <item>
      <title>Bases de Python</title>
      <link>http://example.org/cours/bases-de-python/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://example.org/cours/bases-de-python/index.html</guid>
      <description>Affectation d&amp;rsquo;une variable En programmation, il existe plusieurs types de variables :
les nombres entiers (int) les nombres à virgules dit les flottants (float) les chaînes de caractères (string) les booléens (bool) les listes (list) les dictionnaires (dict) Voici quelques exemples illustrés en python :
# x est un entier x = 5 # y est un flottant y = 7.5 # salutations est une chaîne de caractères salutations = &amp;#34;Bienvenue dans la faille de l&amp;#39;invocateur !</description>
    </item>
    <item>
      <title>Intéragir avec le programme</title>
      <link>http://example.org/cours/int%C3%A9ragir-avec-le-programme/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://example.org/cours/int%C3%A9ragir-avec-le-programme/index.html</guid>
      <description>Pour qu&amp;rsquo;un programme soit réustilisable, il faut pouvoir intéragir avec. C&amp;rsquo;est-à-dire pouvoir modifier ses données de travail. Et pour cela, il faut que le programme donne des informations quant à son état de fonctionnement.
En Python, cela se fait principalement à l&amp;rsquo;aide des fonctions intégrées input() pour la lecture des données et print() pour l&amp;rsquo;affichage des résultats.
On peut aussi fournir des données d&amp;rsquo;entrées grâce à des fichiers de données brut sous différent format (csv, json, &amp;hellip;), ou encore un programme peut aller lui même aller chercher des données en ligne (les dernières données météo, &amp;hellip;).</description>
    </item>
    <item>
      <title>Structures conditionnelles</title>
      <link>http://example.org/cours/structures-conditionnelles/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://example.org/cours/structures-conditionnelles/index.html</guid>
      <description>Structures conditionnelles - if Au cours de son déroulement, un programme a besoin de prendre des décisions en fonction des données qu&amp;rsquo;il rencontre.
Comment cela se traduit ?
La condition est très souvent une opération de comparaison. Attention au : qui est primordial. C&amp;rsquo;est l&amp;rsquo;indentation (le décalage par rapport à la marge gauche) qui délimite le bloc d&amp;rsquo;instructions. La partie else est facultative. Exemple simple # Nous demandons à l&amp;#39;utilisateur de saisir un âge age = int(input(&amp;#34;Saisir votre âge :&amp;#34;)) # Nous testons l&amp;#39;âge à partir de la valeur saisie par l&amp;#39;utilisateur # Nous pouvons noter dans cet exemple la &amp;#34;condition&amp;#34; qui permet de définir, grâce à l&amp;#39;âge, si la personne est majeure ou mineure.</description>
    </item>
    <item>
      <title>La répétition - Les boucles</title>
      <link>http://example.org/cours/la-r%C3%A9p%C3%A9tition-les-boucles/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://example.org/cours/la-r%C3%A9p%C3%A9tition-les-boucles/index.html</guid>
      <description>Cours La répétition en informatique Un des avantages en informatique est qu&amp;rsquo;il est possible de traiter un nombre conséquent d&amp;rsquo;informations en un temps réduit. Ce traitement est souvent le même, mais avec des données différentes.
Par exemple: calculer la température moyenne de chaque semaine de l&amp;rsquo;année provenant d&amp;rsquo;un relevé quotidien de température d&amp;rsquo;une station météo. Dans ce cas, il faut répéter 52 fois une moyenne de 7 températures (du lundi au dimanche).</description>
    </item>
    <item>
      <title>Les Listes</title>
      <link>http://example.org/cours/les-listes/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://example.org/cours/les-listes/index.html</guid>
      <description>Pourquoi utiliser des listes ? Mise en situation Vous devez gérer les données des planètes des différents systèmes solaires. Chaque planète a un nom et une distance par rapport à notre soleil. Vous ne savez pas combien de planètes sont exactement présentes dans ces systèmes solaires. Vous devez afficher le nom de toutes les planètes et leur distance par rapport à notre soleil.
Solution sans liste # Saisie de chaque variable planete_01_nom = &amp;#34;Mercure&amp;#34; planete_01_distance = 58 planete_02_nom = &amp;#34;Vénus&amp;#34; # .</description>
    </item>
    <item>
      <title>Les Structures de Données</title>
      <link>http://example.org/cours/les-structures-de-donn%C3%A9es/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://example.org/cours/les-structures-de-donn%C3%A9es/index.html</guid>
      <description>Qu&amp;rsquo;est-ce qu&amp;rsquo;une Structure de Données en Python ? Une structure de données avancées en Python fait référence à des collections ou des types de données qui permettent de stocker, organiser et manipuler des données de manière efficace.
Nous avons déjà vu d&amp;rsquo;autres structures de données, soit les listes et les chaînes de caractères.
Maintenant, nous regarderons d&amp;rsquo;autres structures de données, soit les dictionnaires, les ensembles et les tuples:
Les dictionnaires Les dictionnaires en Python sont des collections de paires clé-valeur.</description>
    </item>
    <item>
      <title>Les Chaînes de caractères</title>
      <link>http://example.org/cours/les-chaines-de-caract%C3%A8res/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://example.org/cours/les-chaines-de-caract%C3%A8res/index.html</guid>
      <description>Qu&amp;rsquo;est-ce qu&amp;rsquo;une chaîne de caractères ? Une chaîne de caractères est simplement plusieurs caractères regroupés ensemble. Les caractères peuvent être des lettres, chiffres, symboles ou espaces. Les chaînes de caractères sont des objets que nous pouvons manipuler. Nous pouvons concaténer des chaînes, extraire ou chercher des sous-chaînes, les modifier, etc&amp;hellip;
En python, les chaînes de caractères sont appelées string ou str. Elles sont entourées de guillemets simples (&#39;) ou doubles (&amp;quot;):</description>
    </item>
    <item>
      <title>Les Librairies systèmes</title>
      <link>http://example.org/cours/les-librairies-syst%C3%A8mes/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://example.org/cours/les-librairies-syst%C3%A8mes/index.html</guid>
      <description>Qu&amp;rsquo;est-ce qu&amp;rsquo;une Librairie système ? En Python, les librairies systèmes fournissent des interfaces pour intéragir avec le système d&amp;rsquo;exploitation et les ressources matérielles sous-jacentes.
Une librairie système est un ensemble de modules et de fonctions fournies par le système d&amp;rsquo;exploitation ou par des bibliothèques externes qui permettent aux programmes :
De communiquer avec le système d&amp;rsquo;exploitation D&amp;rsquo;accéder aux ressources matérielles De gérer des processus De manipuler des fichiers D&amp;rsquo;effectuer d&amp;rsquo;autres opérations système de bas niveau.</description>
    </item>
    <item>
      <title>Les Objets</title>
      <link>http://example.org/cours/les-objets/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://example.org/cours/les-objets/index.html</guid>
      <description>Qu&amp;rsquo;est-ce qu&amp;rsquo;un objet ? En programmation, un objet est une structure qui regroupe des données et des méthodes qui manipulent ces données. Les objets sont la pierre angulaire de la programmation orientée objet (POO), un paradigme qui organise le code en entités réutilisables et modulaires.
Concept Définition Classe Une classe est un plan ou un modèle pour créer des objets. Objet Un objet est une instance d&amp;rsquo;une classe. Attributs Les attributs sont des variables qui appartiennent à une classe ou à un objet.</description>
    </item>
    <item>
      <title>Les sous-programmes</title>
      <link>http://example.org/cours/les-sous-programmes/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://example.org/cours/les-sous-programmes/index.html</guid>
      <description>.
Déclaration des sous-programmes En programmation, un sous-programme est généralement appelé une fonction. Une fonction est déclarée avec le mot-clé def suivi du nom de la fonction et des parenthèses (). Les instructions à exécuter sont ensuite écrites sous cette déclaration, indentées d&amp;rsquo;une tabulation. # Déclaration d&amp;#39;une fonction nommée ma_fonction def ma_fonction(): print(&amp;#34;Bonjour le monde!&amp;#34;) Appel des sous-programmes Lorsqu&amp;rsquo;on veut utiliser une fonction, on dit qu&amp;rsquo;on appelle la fonction. Pour appeler une fonction, il suffit d&amp;rsquo;écrire son nom suivi de parenthèses ().</description>
    </item>
    <item>
      <title>La portées des variables</title>
      <link>http://example.org/cours/la-port%C3%A9e-des-variables/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://example.org/cours/la-port%C3%A9e-des-variables/index.html</guid>
      <description>Portée des variables La portée d&amp;rsquo;une variable fait référence à l&amp;rsquo;endroit où une variable est accessible/utilisable dans le code. En Python, les variables déclarées à l&amp;rsquo;intérieur d&amp;rsquo;une fonction sont locales à cette fonction, tandis que les variables déclarées en dehors de toute fonction sont globales. Une variable locale pourra être utilisée SEULEMENT à l&amp;rsquo;intérieur de la fonction dans laquelle elle a été déclarée. Une variable globale pourra être utilisée dans tout le programme.</description>
    </item>
    <item>
      <title>Traces d&#39;exécution</title>
      <link>http://example.org/cours/traces-dex%C3%A9cution/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://example.org/cours/traces-dex%C3%A9cution/index.html</guid>
      <description>Cours Qu&amp;rsquo;est-ce que la trace d&amp;rsquo;exécution ? La trace d’exécution est un outil, sous forme d&amp;rsquo;un tableau, qui permet de vérifier le bon fonctionnement d&amp;rsquo;un algorithme. Elle montre l&amp;rsquo;évolution des valeurs de chacune des variables tout au long du déroulement de l’algorithme (exécution pas-à-pas).
Construction du tableau de la trace Les colonnes du tableau correspondent aux variables déclarées dans l&amp;rsquo;algorithme. Le titre des colonnes est le nom des variables. Le titre des lignes est le numéro des lignes de l&amp;rsquo;algorithme.</description>
    </item>
    <item>
      <title>Pandas</title>
      <link>http://example.org/cours/pandas/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://example.org/cours/pandas/index.html</guid>
      <description>.
Qu&amp;rsquo;est-ce que Pandas et pourquoi l&amp;rsquo;utiliser ? Pandas a été développé pour fournir des structures de données flexibles et intuitives, permettant de manipuler facilement des tableaux de données avec des étiquettes de variables (colonnes) et d’individus (lignes). Pandas a été créé par Wes McKinney en 2008, depuis, elle est devenue une bibliothèque de référence pour l’analyse de données en Python. Pandas se distingue par sa capacité à manipuler des données hétérogènes et étiquetées, contrairement à NumPy qui est principalement utilisé pour les tableaux numériques homogènes.</description>
    </item>
    <item>
      <title>Matplotlib</title>
      <link>http://example.org/cours/matplotlib/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://example.org/cours/matplotlib/index.html</guid>
      <description>Qu&amp;rsquo;est-ce que Matplotlib ? La visualisation de données est une compétence essentielle en sciences afin de représenter graphiquement des données complexes pour en faciliter l&amp;rsquo;analyse et l&amp;rsquo;interprétation. Matplotlib est une bibliothèque pour la visualisation de données. Elle permet de créer une variété de graphiques pour représenter les données de manière claire et informative. Utilisation de Matplotlib Pour commencer, vous devez importer dans votre script Python : import matplotlib.pyplot as plt Pour vérifier que Matplotlib est bien installé sur votre environnement : # Version de Matplotlib plt.</description>
    </item>
    <item>
      <title>Numpy</title>
      <link>http://example.org/cours/numpy/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://example.org/cours/numpy/index.html</guid>
      <description>Qu&amp;rsquo;est-ce que Numpy? Numpy (Numerical Python) est une bibliothèque pour le langage Python, ajoutant le support de grands tableaux ainsi qu&amp;rsquo;une large collection de fonctions mathématiques de haut niveau pour les opérer.
C&amp;rsquo;est une bibliothèque essentielle pour la science des données.
Numpy est un module Python qui s&amp;rsquo;importe comme tous les autres. De ce fait, il nous suffit d&amp;rsquo;écrire et d&amp;rsquo;éxecuter le code ci-dessous dans une cellule sur Jupyter Notebook afin d&amp;rsquo;importer cette librairie.</description>
    </item>
    <item>
      <title>Projet - Fil Rouge</title>
      <link>http://example.org/cours/projet-fil-rouge/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://example.org/cours/projet-fil-rouge/index.html</guid>
      <description>Projet - Fil rouge Le projet fil rouge est l&amp;rsquo;activité permettant d’évaluer l’atteinte de l’objectif intégrateur du cours. Il se déroulera sur les 5 dernières semaines de la session. Au cours des 4 premières semaines du projet, nous développerons un programme permettant d&amp;rsquo;explorer, analyser et visualiser des données scientifiques.
Lors de la 5e semaine du projet (dernier cours de la session), vous serez évalués. Votre programme devra être terminé et fonctionnel avant la dernière séance de cours.</description>
    </item>
  </channel>
</rss>